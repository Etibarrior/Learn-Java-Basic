Интерфейсы
------------------------------

Интерфейс выглядит как класс, но это не класс.
Интерфейс может иметь методы и переменные, как и класс,
но методы, объявленные в интерфейсе, по умолчанию являются
абстрактными (только сигнатура метода, без тела).
Кроме того, переменные, объявленные в интерфейсе, по умолчанию
являются общедоступными, статическими и окончательными.

Компилятор Java добавляет ключевые слова public и abstract перед
методом интерфейса. Более того, он добавляет ключевые слова public,
static и final перед data members.

Data members
Переменные, объявленные внутри класса, называются data members
(членами данных). Data members могут быть private или public.
Функции, объявленные внутри класса, называются функциями-членами.

Какая польза от интерфейса в Java?
Они используются для полной абстракции.
Поскольку методы в интерфейсах не имеют тела, они должны быть
реализованы классом, прежде чем вы сможете получить к ним доступ.
Класс, реализующий интерфейс, должен реализовывать все методы
этого интерфейса. Кроме того, Java не позволяет расширять более
одного класса, однако можно реализовать более одного интерфейса в
своем классе.

Почему множественное наследование не поддерживается
через класс в Java, но это возможно через интерфейс?
Множественное наследование не поддерживается классом из-за неоднозначности.
В случае интерфейса нет двусмысленности, поскольку реализация метода(ов)
обеспечивается классом реализации вплоть до Java 7. Начиная с Java 8,
интерфейсы также имеют реализации методов. Таким образом, если класс,
реализующий два или более интерфейса, имеющих одинаковую сигнатуру метода
с реализацией, также обязан реализовать метод в классе.



Методы по умолчанию (default methods)
---------------------------------------

До Java 8 интерфейсы могли иметь только абстрактные методы.
Реализация этих методов должна быть выделена в отдельный класс.
Итак, если новый метод должен быть добавлен в интерфейс, тогда
его код реализации должен быть предоставлен в классе, реализующем
тот же интерфейс. Чтобы решить эту проблему, в Java 8 была введена
концепция методов по умолчанию, которые позволяют интерфейсам иметь
методы с реализацией, не затрагивая классы, реализующие интерфейс.

Методы по умолчанию были введены для обеспечения
обратной совместимости, чтобы существующие интерфейсы
могли использовать лямбда-выражения без реализации
методов в классе реализации. Методы по умолчанию также
известны как методы защитника или методы виртуального
расширения.