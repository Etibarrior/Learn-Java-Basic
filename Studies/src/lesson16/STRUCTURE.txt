STRUCTURE OF PACKAGES
--------------------------

1) BY LAYER (по слоям)
-----------------------------
Организация пакетов, исходя из ответствености
классов.

app/
   |_ controllers/
   |    |_ OrderController.java
   |    |_ ProductController.java
   |_ domain/
   |    |_ Order.java
   |    |_ Payment.java
   |    |_ Product.java
   |_ repository/
   |    |_ OrderRepository.java
   |    |_ PaymentRepository.java
   |    |_ ProductRepository.java
   |_ service/
        |_ MailService.java
        |_ OrderProcessor.java
        |_ PaymentService.java


>> Преимущество BY LAYER.

Простота позволяет поддерживать проект в порядке
даже неопытным разработчикам, так как структура понятна.
Найти подходящее место для нового класса не составляет труда.

>> Недостатки BY LAYER.

Чрезмерное использование модификатора общего доступа.
Например, предоставление репозитория только одному
service-классу требует, чтобы репозиторий был
общедоступным. Тогда, репозиторий доступен для всех
других классов в проекте, даже из слоев, которые не должны напрямую
связываться с ним. Такой подход приводит к спагетти-коду и сильной
связи между пакетами.

При послойном подходе все пакеты описывают архитектуру решения,
но по отдельности могут не давать никакой полезной информации.
Фактически, во многих случаях они дублируют информацию, содержащуюся
в именах классов, его членов.


2) BY FEATURE (по характеристикам, свойствам)
Можно структурировать классы вокруг характеристик или моделей
предметной области.
Основная идея - разместить все классы, которые реализуют конкретный
функционал, в одном пакете.

app/
   |_ order/
   |    |_ payment/
   |    |    |_ Payment.java
   |    |    |_ PaymentRepository.java
   |    |    |_ PaymentService.java
   |    |_ MailService.java
   |    |_ Order.java
   |    |_ OrderController.java
   |    |_ OrderProcessor.java
   |    |_ OrderRepository.java
   |_ product/
        |_ Product.java
        |_ ProductController.java
        |_ ProductRepository.java


>> Достоинства BY FEATURE.

Когда классы в одном пакете, модификатор общего
доступа гораздо более выразителен, поскольку он
позволяет описывать, какая же часть функционала должна
быть доступна другим частям приложения.

Внутри пакета следует отдать предпочтение использованию
package-private для модульности.
Меньшая связка между классами из разных пакетов ведет к
более чистой и удобной в обслуживании кодовой базе.

Пакеты имеют гораздо более значимые имена, описывающие
их функциональное назначение. Взглянув на структуру
проекта, можно определить, что пользователи
могут делать с приложением.

Группировка классов на основе характеристик приводит к
уменьшению размера пакетов и упрощению навигации.

Пакет, ориентированный на характеристику, растет, только
если эта характеристика расширяется. Новая особенность
получает свой собственный пакет.

>> Недостатки BY FEATURE.

По мере развития проекта структура пакетов требует большего
внимания.
Структура пакетов со временем усложняется по мере развития
приложения. Иногда приходится перемещать и/или разделять пакет.

Выбор подходящего места для нового функционала может быть
проблематичным, особенно для новичков в команде, поскольку
для этого требуются знания об особенностях проекта.


ВЫВОДЫ

Несмотря на все достоинства и недостатки, каждый из
подходов имеет право на жизнь, при определенных
обстоятельствах.

Выбор структуры пакетов необходимо делать перед запуском
нового проекта. Хотя можно изменить структуру в любой момент.
Но это может потребовать дополнительных ресурсов.

Надо помнить, что код должен быть читаемым, поддерживаемым
и масштабируемым.
